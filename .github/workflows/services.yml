name: Deploy Services

on: [workflow_dispatch]

jobs:
  install-emissaryingress:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v1

      - name: Azure Login
        uses: Azure/login@v1
        with:
            # ClientId of the Azure Service principal created.
            client-id: ${{secrets.SERVICE_PRINCIPAL_CLIENT_ID}}
            # TenantId of the Azure Service principal created.
            tenant-id: ${{secrets.TENANT_ID}}
            # Azure subscriptionId
            subscription-id: ${{secrets.SUBSCRIPTION_ID}}

      - name: Set AKS context
        run: az aks get-credentials --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.APP_NAME }} 

      - name: Set up Helm 
        uses: azure/setup-helm@v4.2.0 
        with: 
          version: 'latest'

      - name: Install Emissary Ingress
        run: |
          helm repo add datawire https://app.getambassador.io
          helm repo update
          kubectl create namespace emissary || echo "Namespace already exists"
          kubectl apply -f https://app.getambassador.io/yaml/emissary/3.9.1/emissary-crds.yaml
          kubectl wait --timeout=90s --for=condition=available deployment emissary-apiext -n emissary-system
          helm install emissary-ingress \
          --set service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=${{ secrets.APP_NAME }} \
          --namespace emissary datawire/emissary-ingress 
          kubectl -n emissary wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=emissary-ingress

        
      - name: Configure Emissary-Ingress routing
        run: |
          namespace='emissary'
          kubectl apply -f .\emissary-ingress\listener.yaml -n $namespace
          kubectl apply -f .\emissary-ingress\mappings.yaml -n $namespace

  install-certmanagr:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v1

      - name: Azure Login
        uses: Azure/login@v1
        with:
            # ClientId of the Azure Service principal created.
            client-id: ${{secrets.SERVICE_PRINCIPAL_CLIENT_ID}}
            # TenantId of the Azure Service principal created.
            tenant-id: ${{secrets.TENANT_ID}}
            # Azure subscriptionId
            subscription-id: ${{secrets.SUBSCRIPTION_ID}}

      - name: Set AKS context
        run: az aks get-credentials --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.APP_NAME }} 

      - name: Set up Helm 
        uses: azure/setup-helm@v4.2.0 
        with: 
          version: 'latest'
          
      - name: Install Certificate Manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm install \
          cert-manager jetstack/cert-manager \
          --namespace emissary \          
          --version v1.16.2 \
          --set crds.enabled=true
          
      - name: Create Issuer and TLS Certificate
        run: |
          namespace='emissary'
          kubectl apply -f .\cert-manager\cluster-issuer.yaml -n $namespace
          kubectl apply -f .\cert-manager\acme-challenge.yaml -n $namespace
          kubectl apply -f .\emissary-ingress\tls-certificate.yaml -n $namespace
          kubectl apply -f .\emissary-ingress\host.yaml -n $namespace
